
%{
#include <stdio.h>

int yylex();

#define yyerror printf

#include "fol.hpp"

Formula parsed_formula;

%}

%token<str_attr> SYMBOL;
%token<str_attr> VARIABLE;
%token TRUE;
%token FALSE;
%token NOT;
%token AND;
%token OR;
%token IMP;
%token IFF;
%token EQ;
%token NEQ;
%token FORALL;
%token EXISTS;
%token<str_attr> REL2;
%token<str_attr> REL3;
%token<str_attr> REL4;
%token<str_attr> REL5;

%type<formula_attr> formula
%type<formula_attr> iff_formula
%type<formula_attr> imp_formula
%type<formula_attr> or_formula
%type<formula_attr> and_formula
%type<formula_attr> unary_formula
%type<formula_attr> sub_formula
%type<formula_attr> atomic_formula
%type<formula_attr> atom
%type<term_attr> term
%type<term_seq_attr> term_seq

%union {
  string * str_attr;
  BaseFormula * formula_attr;
  BaseTerm * term_attr;
  vector<Term> * term_seq_attr;
}

%%

input  : formula ';'
       {
         parsed_formula = Formula($1);
	 return 0;
       }
       ;

formula : iff_formula
	{
	 $$ = $1;
	}
	;

iff_formula : iff_formula IFF imp_formula
  	{
	  $$ = new Iff(Formula($1), Formula($3));
	}
	| imp_formula
	{
	  $$ = $1;
	}
	;

imp_formula : imp_formula IMP or_formula
	    {
	      $$ = new Imp(Formula($1), Formula($3));
	    }
	    | or_formula
	    {
	      $$ = $1;
	    }
	    ;

or_formula : or_formula OR and_formula
	   {
	     $$ = new Or(Formula($1), Formula($3));
	   }
	   | and_formula
	   {
	     $$ = $1;
	   }
	   ;

and_formula : and_formula AND unary_formula
	    {
	      $$ = new And(Formula($1), Formula($3));
	    }
	    | unary_formula
	    {
	      $$ = $1;
	    }
	    ;

unary_formula : NOT unary_formula
	      {
	       $$ = new Not(Formula($2));
	      }
	      | FORALL '[' VARIABLE ']' ':' unary_formula
	      {
	       $$ = new Forall(*$3, Formula($6));
	       delete $3;
	      }
	      | EXISTS '[' VARIABLE ']' ':' unary_formula
	      {
	       $$ = new Exists(*$3, Formula($6));
	       delete $3;
	      }
	      | sub_formula
	      {
	       $$ = $1;
	      }
	      ;

sub_formula : atomic_formula
	    {
	      $$ = $1;
	    } 
	    | '(' formula ')'
	    {
	      $$ = $2;
	    }
	    ;

atomic_formula : atom
	       {
	         $$ = $1;
	       }
	       | TRUE
	       {
	         $$ = new True();
	       }
	       | FALSE
	       {
	         $$ = new False();
	       }
	       ;


 	 // SYMBOL
//      {
//        $$ = new Atom(*$1);
//        delete $1;
//      }
     // | 
 atom : REL2 '(' term ',' term ')'
     {
       $$ = new Atom(*$1, *new vector<Term>{ Term($3), Term($5) } );
     }
     /*
     | SYMBOL '(' term_seq ')'
     {
       $$ = new Atom(*$1, *$3);
       delete $1;
       delete $3;
     }
     */
     | REL3 '(' term ',' term ',' term ')'
     {
       $$ = new Atom(*$1, *new vector<Term>{ Term($3), Term($5), Term($7) } );
     }
     | REL4 '(' term ',' term ',' term ',' term ')'
     {
       $$ = new Atom(*$1, *new vector<Term>{ Term($3), Term($5), Term($7), Term($9) } );
     }
     | REL5 '(' term ',' term ',' term ',' term ',' term ')'
     {
       $$ = new Atom(*$1, *new vector<Term>{ Term($3), Term($5), Term($7), Term($9), Term($11) } );
     }
     | term EQ term 
     {
       $$ = new Equality(Term($1), Term($3));
     }
     | term NEQ term
     {
       $$ = new Disequality(Term($1), Term($3));
     }
     ;

term_seq : term_seq ',' term
	 {
	   $$ = $1;
	   $$->push_back(Term($3));
	 }
	 | term
	 {
	   $$ = new vector<Term>();
	   $$->push_back(Term($1));
	 }
	 ;

term : VARIABLE
     {
       $$ = new VariableTerm(*$1);
       delete $1;
     }
     | SYMBOL
     {
       $$ = new FunctionTerm(*$1);
       delete $1;
     }
     | SYMBOL '(' term_seq ')'
     {
       $$ = new FunctionTerm(*$1, *$3);
       delete $1;
       delete $3;
     }
     ;

%%
